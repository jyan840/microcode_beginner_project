; SMT-LIBv2 description generated by Yosys 0.46+124 (git sha1 d1695ad99, g++ 15.0.0 -fPIC -O3)
; yosys-smt2-module nerv_regs
(declare-sort |nerv_regs_s| 0)
(declare-fun |nerv_regs_is| (|nerv_regs_s|) Bool)
(declare-fun |nerv_regs#0| (|nerv_regs_s|) Bool) ; \clk
; yosys-smt2-input clk 1
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |nerv_regs_n clk| ((state |nerv_regs_s|)) Bool (|nerv_regs#0| state))
(declare-fun |nerv_regs#1| (|nerv_regs_s|) (_ BitVec 32)) ; \next_rd
; yosys-smt2-input next_rd 32
; yosys-smt2-witness {"offset": 0, "path": ["\\next_rd"], "smtname": "next_rd", "smtoffset": 0, "type": "input", "width": 32}
(define-fun |nerv_regs_n next_rd| ((state |nerv_regs_s|)) (_ BitVec 32) (|nerv_regs#1| state))
(declare-fun |nerv_regs#2| (|nerv_regs_s|) Bool) ; \next_wr
; yosys-smt2-input next_wr 1
; yosys-smt2-witness {"offset": 0, "path": ["\\next_wr"], "smtname": "next_wr", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |nerv_regs_n next_wr| ((state |nerv_regs_s|)) Bool (|nerv_regs#2| state))
(declare-fun |nerv_regs#3| (|nerv_regs_s|) (_ BitVec 5)) ; \raddr1
; yosys-smt2-input raddr1 5
; yosys-smt2-witness {"offset": 0, "path": ["\\raddr1"], "smtname": "raddr1", "smtoffset": 0, "type": "input", "width": 5}
(define-fun |nerv_regs_n raddr1| ((state |nerv_regs_s|)) (_ BitVec 5) (|nerv_regs#3| state))
(declare-fun |nerv_regs#4| (|nerv_regs_s|) (_ BitVec 5)) ; \raddr2
; yosys-smt2-input raddr2 5
; yosys-smt2-witness {"offset": 0, "path": ["\\raddr2"], "smtname": "raddr2", "smtoffset": 0, "type": "input", "width": 5}
(define-fun |nerv_regs_n raddr2| ((state |nerv_regs_s|)) (_ BitVec 5) (|nerv_regs#4| state))
(declare-fun |nerv_regs#5| (|nerv_regs_s|) (_ BitVec 5)) ; \wr_rd
; yosys-smt2-input wr_rd 5
; yosys-smt2-witness {"offset": 0, "path": ["\\wr_rd"], "smtname": "wr_rd", "smtoffset": 0, "type": "input", "width": 5}
(define-fun |nerv_regs_n wr_rd| ((state |nerv_regs_s|)) (_ BitVec 5) (|nerv_regs#5| state))
; yosys-smt2-output rdata1 32
; yosys-smt2-witness {"offset": 0, "path": ["\\rdata1"], "smtname": "rdata1", "smtoffset": 0, "type": "blackbox", "width": 32}
(define-fun |nerv_regs_n rdata1| ((state |nerv_regs_s|)) (_ BitVec 32) (let (
(|clk| (|nerv_regs_n clk| state))
(|next_rd| (|nerv_regs_n next_rd| state))
(|next_wr| (|nerv_regs_n next_wr| state))
(|raddr1| (|nerv_regs_n raddr1| state))
(|raddr2| (|nerv_regs_n raddr2| state))
(|wr_rd| (|nerv_regs_n wr_rd| state))
)
(select (Array (_ BitVec 5) (_ BitVec 32)) raddr1)
))
; yosys-smt2-output rdata2 32
; yosys-smt2-witness {"offset": 0, "path": ["\\rdata2"], "smtname": "rdata2", "smtoffset": 0, "type": "blackbox", "width": 32}
(define-fun |nerv_regs_n rdata2| ((state |nerv_regs_s|)) (_ BitVec 32) (let (
(|clk| (|nerv_regs_n clk| state))
(|next_rd| (|nerv_regs_n next_rd| state))
(|next_wr| (|nerv_regs_n next_wr| state))
(|raddr1| (|nerv_regs_n raddr1| state))
(|raddr2| (|nerv_regs_n raddr2| state))
(|wr_rd| (|nerv_regs_n wr_rd| state))
)
(select (Array (_ BitVec 5) (_ BitVec 32)) raddr2)
))
(define-fun |nerv_regs_a| ((state |nerv_regs_s|)) Bool true)
(define-fun |nerv_regs_u| ((state |nerv_regs_s|)) Bool true)
(define-fun |nerv_regs_i| ((state |nerv_regs_s|)) Bool true)
(define-fun |nerv_regs_h| ((state |nerv_regs_s|)) Bool true)
(define-fun |nerv_regs_t| ((state |nerv_regs_s|) (next_state |nerv_regs_s|)) Bool true) ; end of module nerv_regs
; end of yosys output
